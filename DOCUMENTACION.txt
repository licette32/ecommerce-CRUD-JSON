Documentación del Proyecto: Tienda Online (CRUD de Productos y Gestión de Usuarios)

1. Introducción y Propósito del Proyecto
Este proyecto es una aplicación web básica que simula una tienda online, enfocada en la gestión de un catálogo de productos y una
 funcionalidad de administración para un usuario con credenciales fijas. Permite a los usuarios navegar por los productos, ver 
 detalles, y a un administrador realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) sobre el catálogo de productos.


2. Tecnologías Clave Utilizadas

Node.js: Entorno de ejecución JavaScript del lado del servidor.

Express.js: Framework web para Node.js, utilizado para construir la API y manejar las rutas.

EJS (Embedded JavaScript): Motor de plantillas para generar HTML dinámicamente desde el lado del servidor.

FS (File System) con Promesas: Módulo de Node.js para interactuar con el sistema de archivos, utilizado para leer y escribir 
datos JSON.

body-parser: Middleware de Express para procesar los cuerpos de las solicitudes HTTP (datos de formularios, JSON).

method-override: Middleware para permitir el uso de verbos HTTP como PUT o DELETE en formularios HTML que solo soportan GET y POST.

JSON (JavaScript Object Notation): Formato ligero para el intercambio de datos, utilizado como base de datos simple para 
almacenar productos.

Nodemon: Herramienta de desarrollo que reinicia automáticamente el servidor al detectar cambios en los archivos.


3. Estructura del Proyecto

El proyecto sigue una estructura de carpetas modular para organizar el código de manera lógica:

Final JSON/
├── app.js                   # Archivo principal de la aplicación
├── data/
│   └── products.json        # "Base de datos" de productos en formato JSON
├── public/                  # Archivos estáticos (CSS, JavaScript del cliente, imágenes)
│   ├── css/
│   ├── js/
│   └── image/               # Imágenes de productos y para errores (ej. error404.png)
├── controllers/             # Lógica de negocio y manejo de solicitudes HTTP
│   ├── productController.js # Manejador de la lógica de productos
│   └── userController.js    # Manejador de la lógica de usuarios/autenticación
├── routes/                  # Definición de rutas y mapeo a los controladores
│   ├── productRouter.js     # Rutas relacionadas con productos (CRUD)
│   └── userRouter.js        # Rutas relacionadas con usuarios (login, admin panel)
└── views/                   # Plantillas EJS para renderizar las páginas HTML
    ├── Home.ejs             # Página de inicio
    ├── productos.ejs        # Página con el listado completo de productos o categorías
    ├── error404.ejs         # Página para errores 404 (no encontrado)
    ├── contact/             # Vistas relacionadas con el contacto
    │   ├── contact.ejs
    │   └── contact-success.ejs
    ├── products/            # Vistas relacionadas con la gestión de productos
    │   ├── detalleProd.ejs
    │   ├── createProduct.ejs
    │   ├── editProduct.ejs
    │   └── deleteProductConfirm.ejs
    └── users/               # Vistas relacionadas con usuarios y administración
        ├── login.ejs        # Formulario de login
        └── admin.ejs        # Panel de administración de productos

4. Funcionalidades Principales
4.1. Gestión de Productos (CRUD)

La gestión de productos se realiza a través de productController.js y routes/productRouter.js, utilizando data/products.json como 
almacenamiento:

Listar Productos (Read):

La ruta /productos (manejada en app.js) lee products.json y muestra todos los productos o filtra por categoría 
(ej. /productos?categoria=kits).
La página de inicio (/) también muestra productos filtrados por "kits" y "ofertas" directamente desde app.js.

Detalle del Producto (Read):
La ruta GET /products/detail/:id (definida en productRouter.js) muestra la información detallada de un producto específico.

Crear Nuevo Producto (Create):
GET /admin/productos/create: Muestra el formulario para añadir un nuevo producto.
POST /admin/productos: Guarda el nuevo producto en products.json (incluyendo carga de imagen si se usa Multer) y redirige al 
panel de administración.

Editar Producto Existente (Update):
GET /admin/productos/edit/:id: Muestra el formulario de edición con los datos actuales del producto.
PUT /admin/productos/:id (usando _method): Actualiza los datos del producto en products.json y redirige.

Eliminar Producto (Delete):
GET /admin/productos/delete/:id: Muestra una página de confirmación de eliminación.
DELETE /admin/productos/:id (usando _method): Elimina el producto de products.json (y su imagen si existe) y redirige.


4.2. Gestión de Usuarios y Panel de Administración

La lógica de usuarios y el panel de administración se manejan en userController.js y routes/userRouter.js:

Login de Usuario:
GET /users/login: Muestra el formulario de login.
POST /users/login: Procesa las credenciales. Actualmente, solo acepta "admin" y "1234". Si las credenciales son correctas, 
redirige al panel de administración; de lo contrario, muestra un mensaje de error.

Panel de Administración:
GET /users/admin: Muestra la lista de todos los productos en una interfaz de administración, desde donde se pueden iniciar 
las operaciones CRUD.


4.3. Rutas Adicionales

Página de Contacto:
GET /contacto: Muestra el formulario de contacto.
POST /submit-contact: Procesa el envío del formulario de contacto (registra los datos en consola por ahora) y redirige a una 
página de éxito.
GET /contacto/exito: Muestra un mensaje de confirmación de envío de contacto.
Manejo de Errores 404: Cualquier ruta no definida redirige a una página de error 404 (error404.ejs).


5. Funcionamiento General (Flujo de Solicitud)

Inicio de la Aplicación: app.js es el punto de entrada. Configura Express, los motores de plantillas, los middlewares 
(body-parser, method-override, static) y define las rutas principales.

Manejo de Rutas:
Cuando una solicitud llega al servidor (ej. GET /users/login), app.js delega esa solicitud al router correspondiente (en este 
caso, userRouter).
El router identifica la ruta y la pasa a la función de controlador asociada (ej. userController.mostrarLogin).

Lógica del Controlador:
El controlador realiza las operaciones necesarias (ej. leer un archivo JSON, procesar datos de un formulario, realizar validaciones).
Prepara los datos necesarios para la vista.

Renderizado de la Vista:
El controlador llama a res.render() para enviar una plantilla EJS al navegador del cliente, pasándole los datos preparados.
EJS procesa la plantilla, inserta los datos y genera el HTML final.

Redirección:
Después de operaciones como la creación o actualización, el controlador usa res.redirect() para enviar al usuario a otra página.


6. Consideraciones y Mejoras Futuras

Base de Datos Real: Reemplazar products.json con una base de datos real (MongoDB, PostgreSQL, MySQL) para una gestión de datos
más robusta y escalable.

Autenticación y Sesiones: Implementar un sistema de autenticación de usuarios adecuado (con hashing de contraseñas y 
sesiones/JWT) en lugar de credenciales fijas para el administrador.

Validación de Datos: Añadir validación de entrada de datos más robusta en el servidor para formularios (ej. con librerías como 
Express-validator).

Manejo de Errores: Implementar un middleware centralizado para el manejo de errores en toda la aplicación.

Subida de Archivos: Si se usa Multer, mejorar la gestión de archivos subidos (ej. validación de tipo de archivo, 
redimensionamiento de imágenes).

Interfaz de Usuario: Mejorar el diseño y la experiencia de usuario (UX) de las vistas.
